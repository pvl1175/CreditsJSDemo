//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Amount = function(args) {
  this.integral = 0;
  this.fraction = 0;
  if (args) {
    if (args.integral !== undefined && args.integral !== null) {
      this.integral = args.integral;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
    }
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
    }
  }
};
Amount.prototype = {};
Amount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.integral = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fraction = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Amount.prototype.write = function(output) {
  output.writeStructBegin('Amount');
  if (this.integral !== null && this.integral !== undefined) {
    output.writeFieldBegin('integral', Thrift.Type.I32, 1);
    output.writeI32(this.integral);
    output.writeFieldEnd();
  }
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
    output.writeI64(this.fraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CumulativeAmount = function(args) {
  this.integral = 0;
  this.fraction = 0;
  if (args) {
    if (args.integral !== undefined && args.integral !== null) {
      this.integral = args.integral;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field integral is unset!');
    }
    if (args.fraction !== undefined && args.fraction !== null) {
      this.fraction = args.fraction;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field fraction is unset!');
    }
  }
};
CumulativeAmount.prototype = {};
CumulativeAmount.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.integral = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I64) {
        this.fraction = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CumulativeAmount.prototype.write = function(output) {
  output.writeStructBegin('CumulativeAmount');
  if (this.integral !== null && this.integral !== undefined) {
    output.writeFieldBegin('integral', Thrift.Type.I64, 1);
    output.writeI64(this.integral);
    output.writeFieldEnd();
  }
  if (this.fraction !== null && this.fraction !== undefined) {
    output.writeFieldBegin('fraction', Thrift.Type.I64, 2);
    output.writeI64(this.fraction);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartContract = function(args) {
  this.address = null;
  this.deployer = null;
  this.sourceCode = null;
  this.byteCode = null;
  this.hashState = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field address is unset!');
    }
    if (args.deployer !== undefined && args.deployer !== null) {
      this.deployer = args.deployer;
    }
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.hashState !== undefined && args.hashState !== null) {
      this.hashState = args.hashState;
    }
  }
};
SmartContract.prototype = {};
SmartContract.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.deployer = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.hashState = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContract.prototype.write = function(output) {
  output.writeStructBegin('SmartContract');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.deployer !== null && this.deployer !== undefined) {
    output.writeFieldBegin('deployer', Thrift.Type.STRING, 2);
    output.writeBinary(this.deployer);
    output.writeFieldEnd();
  }
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 3);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 4);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.hashState !== null && this.hashState !== undefined) {
    output.writeFieldBegin('hashState', Thrift.Type.STRING, 5);
    output.writeString(this.hashState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartContractInvocation = function(args) {
  this.sourceCode = null;
  this.byteCode = null;
  this.hashState = null;
  this.method = null;
  this.params = null;
  this.forgetNewState = null;
  if (args) {
    if (args.sourceCode !== undefined && args.sourceCode !== null) {
      this.sourceCode = args.sourceCode;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.hashState !== undefined && args.hashState !== null) {
      this.hashState = args.hashState;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
    if (args.forgetNewState !== undefined && args.forgetNewState !== null) {
      this.forgetNewState = args.forgetNewState;
    }
  }
};
SmartContractInvocation.prototype = {};
SmartContractInvocation.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.sourceCode = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.hashState = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.params = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = input.readString().value;
          this.params.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BOOL) {
        this.forgetNewState = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractInvocation.prototype.write = function(output) {
  output.writeStructBegin('SmartContractInvocation');
  if (this.sourceCode !== null && this.sourceCode !== undefined) {
    output.writeFieldBegin('sourceCode', Thrift.Type.STRING, 1);
    output.writeString(this.sourceCode);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 2);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.hashState !== null && this.hashState !== undefined) {
    output.writeFieldBegin('hashState', Thrift.Type.STRING, 3);
    output.writeString(this.hashState);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter7 in this.params)
    {
      if (this.params.hasOwnProperty(iter7))
      {
        iter7 = this.params[iter7];
        output.writeString(iter7);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.forgetNewState !== null && this.forgetNewState !== undefined) {
    output.writeFieldBegin('forgetNewState', Thrift.Type.BOOL, 6);
    output.writeBool(this.forgetNewState);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionId = function(args) {
  this.poolHash = null;
  this.index = null;
  if (args) {
    if (args.poolHash !== undefined && args.poolHash !== null) {
      this.poolHash = args.poolHash;
    }
    if (args.index !== undefined && args.index !== null) {
      this.index = args.index;
    }
  }
};
TransactionId.prototype = {};
TransactionId.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.poolHash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.index = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionId.prototype.write = function(output) {
  output.writeStructBegin('TransactionId');
  if (this.poolHash !== null && this.poolHash !== undefined) {
    output.writeFieldBegin('poolHash', Thrift.Type.STRING, 1);
    output.writeBinary(this.poolHash);
    output.writeFieldEnd();
  }
  if (this.index !== null && this.index !== undefined) {
    output.writeFieldBegin('index', Thrift.Type.I32, 2);
    output.writeI32(this.index);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Transaction = function(args) {
  this.id = null;
  this.source = null;
  this.target = null;
  this.amount = null;
  this.balance = null;
  this.currency = null;
  this.signature = null;
  this.smartContract = null;
  this.fee = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = args.id;
    }
    if (args.source !== undefined && args.source !== null) {
      this.source = args.source;
    }
    if (args.target !== undefined && args.target !== null) {
      this.target = args.target;
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new Amount(args.amount);
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new Amount(args.balance);
    }
    if (args.currency !== undefined && args.currency !== null) {
      this.currency = args.currency;
    }
    if (args.signature !== undefined && args.signature !== null) {
      this.signature = args.signature;
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new SmartContractInvocation(args.smartContract);
    }
    if (args.fee !== undefined && args.fee !== null) {
      this.fee = new Amount(args.fee);
    }
  }
};
Transaction.prototype = {};
Transaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.id = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.source = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.target = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.BYTE) {
        this.currency = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRING) {
        this.signature = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new SmartContractInvocation();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.STRUCT) {
        this.fee = new Amount();
        this.fee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Transaction.prototype.write = function(output) {
  output.writeStructBegin('Transaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.I64, 1);
    output.writeI64(this.id);
    output.writeFieldEnd();
  }
  if (this.source !== null && this.source !== undefined) {
    output.writeFieldBegin('source', Thrift.Type.STRING, 2);
    output.writeBinary(this.source);
    output.writeFieldEnd();
  }
  if (this.target !== null && this.target !== undefined) {
    output.writeFieldBegin('target', Thrift.Type.STRING, 3);
    output.writeBinary(this.target);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 4);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 5);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.currency !== null && this.currency !== undefined) {
    output.writeFieldBegin('currency', Thrift.Type.BYTE, 6);
    output.writeByte(this.currency);
    output.writeFieldEnd();
  }
  if (this.signature !== null && this.signature !== undefined) {
    output.writeFieldBegin('signature', Thrift.Type.STRING, 7);
    output.writeBinary(this.signature);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 8);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  if (this.fee !== null && this.fee !== undefined) {
    output.writeFieldBegin('fee', Thrift.Type.STRUCT, 9);
    this.fee.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SealedTransaction = function(args) {
  this.id = null;
  this.trxn = null;
  if (args) {
    if (args.id !== undefined && args.id !== null) {
      this.id = new TransactionId(args.id);
    }
    if (args.trxn !== undefined && args.trxn !== null) {
      this.trxn = new Transaction(args.trxn);
    }
  }
};
SealedTransaction.prototype = {};
SealedTransaction.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.id = new TransactionId();
        this.id.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.trxn = new Transaction();
        this.trxn.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SealedTransaction.prototype.write = function(output) {
  output.writeStructBegin('SealedTransaction');
  if (this.id !== null && this.id !== undefined) {
    output.writeFieldBegin('id', Thrift.Type.STRUCT, 1);
    this.id.write(output);
    output.writeFieldEnd();
  }
  if (this.trxn !== null && this.trxn !== undefined) {
    output.writeFieldBegin('trxn', Thrift.Type.STRUCT, 2);
    this.trxn.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Pool = function(args) {
  this.hash = null;
  this.prevHash = null;
  this.time = null;
  this.transactionsCount = null;
  this.poolNumber = null;
  this.writer = null;
  this.totalFee = null;
  if (args) {
    if (args.hash !== undefined && args.hash !== null) {
      this.hash = args.hash;
    }
    if (args.prevHash !== undefined && args.prevHash !== null) {
      this.prevHash = args.prevHash;
    }
    if (args.time !== undefined && args.time !== null) {
      this.time = args.time;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.poolNumber !== undefined && args.poolNumber !== null) {
      this.poolNumber = args.poolNumber;
    }
    if (args.writer !== undefined && args.writer !== null) {
      this.writer = args.writer;
    }
    if (args.totalFee !== undefined && args.totalFee !== null) {
      this.totalFee = new Amount(args.totalFee);
    }
  }
};
Pool.prototype = {};
Pool.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.hash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.prevHash = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.time = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.poolNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.writer = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.STRUCT) {
        this.totalFee = new Amount();
        this.totalFee.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Pool.prototype.write = function(output) {
  output.writeStructBegin('Pool');
  if (this.hash !== null && this.hash !== undefined) {
    output.writeFieldBegin('hash', Thrift.Type.STRING, 1);
    output.writeBinary(this.hash);
    output.writeFieldEnd();
  }
  if (this.prevHash !== null && this.prevHash !== undefined) {
    output.writeFieldBegin('prevHash', Thrift.Type.STRING, 2);
    output.writeBinary(this.prevHash);
    output.writeFieldEnd();
  }
  if (this.time !== null && this.time !== undefined) {
    output.writeFieldBegin('time', Thrift.Type.I64, 3);
    output.writeI64(this.time);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 4);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.poolNumber !== null && this.poolNumber !== undefined) {
    output.writeFieldBegin('poolNumber', Thrift.Type.I64, 5);
    output.writeI64(this.poolNumber);
    output.writeFieldEnd();
  }
  if (this.writer !== null && this.writer !== undefined) {
    output.writeFieldBegin('writer', Thrift.Type.STRING, 6);
    output.writeBinary(this.writer);
    output.writeFieldEnd();
  }
  if (this.totalFee !== null && this.totalFee !== undefined) {
    output.writeFieldBegin('totalFee', Thrift.Type.STRUCT, 7);
    this.totalFee.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PeriodStats = function(args) {
  this.periodDuration = null;
  this.poolsCount = null;
  this.transactionsCount = null;
  this.balancePerCurrency = null;
  this.smartContractsCount = null;
  this.transactionsSmartCount = null;
  if (args) {
    if (args.periodDuration !== undefined && args.periodDuration !== null) {
      this.periodDuration = args.periodDuration;
    }
    if (args.poolsCount !== undefined && args.poolsCount !== null) {
      this.poolsCount = args.poolsCount;
    }
    if (args.transactionsCount !== undefined && args.transactionsCount !== null) {
      this.transactionsCount = args.transactionsCount;
    }
    if (args.balancePerCurrency !== undefined && args.balancePerCurrency !== null) {
      this.balancePerCurrency = Thrift.copyMap(args.balancePerCurrency, [CumulativeAmount]);
    }
    if (args.smartContractsCount !== undefined && args.smartContractsCount !== null) {
      this.smartContractsCount = args.smartContractsCount;
    }
    if (args.transactionsSmartCount !== undefined && args.transactionsSmartCount !== null) {
      this.transactionsSmartCount = args.transactionsSmartCount;
    }
  }
};
PeriodStats.prototype = {};
PeriodStats.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.periodDuration = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.poolsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.transactionsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.MAP) {
        var _size8 = 0;
        var _rtmp312;
        this.balancePerCurrency = {};
        var _ktype9 = 0;
        var _vtype10 = 0;
        _rtmp312 = input.readMapBegin();
        _ktype9 = _rtmp312.ktype;
        _vtype10 = _rtmp312.vtype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          if (_i13 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key14 = null;
          var val15 = null;
          key14 = input.readByte().value;
          val15 = new CumulativeAmount();
          val15.read(input);
          this.balancePerCurrency[key14] = val15;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I32) {
        this.smartContractsCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I32) {
        this.transactionsSmartCount = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PeriodStats.prototype.write = function(output) {
  output.writeStructBegin('PeriodStats');
  if (this.periodDuration !== null && this.periodDuration !== undefined) {
    output.writeFieldBegin('periodDuration', Thrift.Type.I64, 1);
    output.writeI64(this.periodDuration);
    output.writeFieldEnd();
  }
  if (this.poolsCount !== null && this.poolsCount !== undefined) {
    output.writeFieldBegin('poolsCount', Thrift.Type.I32, 2);
    output.writeI32(this.poolsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsCount !== null && this.transactionsCount !== undefined) {
    output.writeFieldBegin('transactionsCount', Thrift.Type.I32, 3);
    output.writeI32(this.transactionsCount);
    output.writeFieldEnd();
  }
  if (this.balancePerCurrency !== null && this.balancePerCurrency !== undefined) {
    output.writeFieldBegin('balancePerCurrency', Thrift.Type.MAP, 4);
    output.writeMapBegin(Thrift.Type.BYTE, Thrift.Type.STRUCT, Thrift.objectLength(this.balancePerCurrency));
    for (var kiter16 in this.balancePerCurrency)
    {
      if (this.balancePerCurrency.hasOwnProperty(kiter16))
      {
        var viter17 = this.balancePerCurrency[kiter16];
        output.writeByte(kiter16);
        viter17.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.smartContractsCount !== null && this.smartContractsCount !== undefined) {
    output.writeFieldBegin('smartContractsCount', Thrift.Type.I32, 5);
    output.writeI32(this.smartContractsCount);
    output.writeFieldEnd();
  }
  if (this.transactionsSmartCount !== null && this.transactionsSmartCount !== undefined) {
    output.writeFieldBegin('transactionsSmartCount', Thrift.Type.I32, 6);
    output.writeI32(this.transactionsSmartCount);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIResponse = function(args) {
  this.code = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
APIResponse.prototype = {};
APIResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIResponse.prototype.write = function(output) {
  output.writeStructBegin('APIResponse');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

BalanceGetResult = function(args) {
  this.status = null;
  this.amount = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.amount !== undefined && args.amount !== null) {
      this.amount = new Amount(args.amount);
    }
  }
};
BalanceGetResult.prototype = {};
BalanceGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.amount = new Amount();
        this.amount.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BalanceGetResult.prototype.write = function(output) {
  output.writeStructBegin('BalanceGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.amount !== null && this.amount !== undefined) {
    output.writeFieldBegin('amount', Thrift.Type.STRUCT, 2);
    this.amount.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionGetResult = function(args) {
  this.status = null;
  this.found = null;
  this.transaction = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.found !== undefined && args.found !== null) {
      this.found = args.found;
    }
    if (args.transaction !== undefined && args.transaction !== null) {
      this.transaction = new SealedTransaction(args.transaction);
    }
  }
};
TransactionGetResult.prototype = {};
TransactionGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.found = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.transaction = new SealedTransaction();
        this.transaction.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.found !== null && this.found !== undefined) {
    output.writeFieldBegin('found', Thrift.Type.BOOL, 2);
    output.writeBool(this.found);
    output.writeFieldEnd();
  }
  if (this.transaction !== null && this.transaction !== undefined) {
    output.writeFieldBegin('transaction', Thrift.Type.STRUCT, 3);
    this.transaction.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionsGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [SealedTransaction]);
    }
  }
};
TransactionsGetResult.prototype = {};
TransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size18 = 0;
        var _rtmp322;
        this.transactions = [];
        var _etype21 = 0;
        _rtmp322 = input.readListBegin();
        _etype21 = _rtmp322.etype;
        _size18 = _rtmp322.size;
        for (var _i23 = 0; _i23 < _size18; ++_i23)
        {
          var elem24 = null;
          elem24 = new SealedTransaction();
          elem24.read(input);
          this.transactions.push(elem24);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter25 in this.transactions)
    {
      if (this.transactions.hasOwnProperty(iter25))
      {
        iter25 = this.transactions[iter25];
        iter25.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

TransactionFlowResult = function(args) {
  this.status = null;
  this.smart_contract_result = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.smart_contract_result !== undefined && args.smart_contract_result !== null) {
      this.smart_contract_result = new Variant(args.smart_contract_result);
    }
  }
};
TransactionFlowResult.prototype = {};
TransactionFlowResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smart_contract_result = new Variant();
        this.smart_contract_result.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TransactionFlowResult.prototype.write = function(output) {
  output.writeStructBegin('TransactionFlowResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smart_contract_result !== null && this.smart_contract_result !== undefined) {
    output.writeFieldBegin('smart_contract_result', Thrift.Type.STRUCT, 2);
    this.smart_contract_result.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PoolListGetResult = function(args) {
  this.status = null;
  this.result = null;
  this.pools = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.pools !== undefined && args.pools !== null) {
      this.pools = Thrift.copyList(args.pools, [Pool]);
    }
  }
};
PoolListGetResult.prototype = {};
PoolListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.result = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.pools = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new Pool();
          elem32.read(input);
          this.pools.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolListGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.BOOL, 2);
    output.writeBool(this.result);
    output.writeFieldEnd();
  }
  if (this.pools !== null && this.pools !== undefined) {
    output.writeFieldBegin('pools', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.pools.length);
    for (var iter33 in this.pools)
    {
      if (this.pools.hasOwnProperty(iter33))
      {
        iter33 = this.pools[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PoolInfoGetResult = function(args) {
  this.status = null;
  this.isFound = null;
  this.pool = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.isFound !== undefined && args.isFound !== null) {
      this.isFound = args.isFound;
    }
    if (args.pool !== undefined && args.pool !== null) {
      this.pool = new Pool(args.pool);
    }
  }
};
PoolInfoGetResult.prototype = {};
PoolInfoGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.isFound = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.pool = new Pool();
        this.pool.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolInfoGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolInfoGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.isFound !== null && this.isFound !== undefined) {
    output.writeFieldBegin('isFound', Thrift.Type.BOOL, 2);
    output.writeBool(this.isFound);
    output.writeFieldEnd();
  }
  if (this.pool !== null && this.pool !== undefined) {
    output.writeFieldBegin('pool', Thrift.Type.STRUCT, 3);
    this.pool.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

PoolTransactionsGetResult = function(args) {
  this.status = null;
  this.transactions = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.transactions !== undefined && args.transactions !== null) {
      this.transactions = Thrift.copyList(args.transactions, [SealedTransaction]);
    }
  }
};
PoolTransactionsGetResult.prototype = {};
PoolTransactionsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size34 = 0;
        var _rtmp338;
        this.transactions = [];
        var _etype37 = 0;
        _rtmp338 = input.readListBegin();
        _etype37 = _rtmp338.etype;
        _size34 = _rtmp338.size;
        for (var _i39 = 0; _i39 < _size34; ++_i39)
        {
          var elem40 = null;
          elem40 = new SealedTransaction();
          elem40.read(input);
          this.transactions.push(elem40);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PoolTransactionsGetResult.prototype.write = function(output) {
  output.writeStructBegin('PoolTransactionsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.transactions !== null && this.transactions !== undefined) {
    output.writeFieldBegin('transactions', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.transactions.length);
    for (var iter41 in this.transactions)
    {
      if (this.transactions.hasOwnProperty(iter41))
      {
        iter41 = this.transactions[iter41];
        iter41.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

StatsGetResult = function(args) {
  this.status = null;
  this.stats = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.stats !== undefined && args.stats !== null) {
      this.stats = Thrift.copyList(args.stats, [PeriodStats]);
    }
  }
};
StatsGetResult.prototype = {};
StatsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size42 = 0;
        var _rtmp346;
        this.stats = [];
        var _etype45 = 0;
        _rtmp346 = input.readListBegin();
        _etype45 = _rtmp346.etype;
        _size42 = _rtmp346.size;
        for (var _i47 = 0; _i47 < _size42; ++_i47)
        {
          var elem48 = null;
          elem48 = new PeriodStats();
          elem48.read(input);
          this.stats.push(elem48);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StatsGetResult.prototype.write = function(output) {
  output.writeStructBegin('StatsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.stats !== null && this.stats !== undefined) {
    output.writeFieldBegin('stats', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.stats.length);
    for (var iter49 in this.stats)
    {
      if (this.stats.hasOwnProperty(iter49))
      {
        iter49 = this.stats[iter49];
        iter49.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartContractGetResult = function(args) {
  this.status = null;
  this.smartContract = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.smartContract !== undefined && args.smartContract !== null) {
      this.smartContract = new SmartContract(args.smartContract);
    }
  }
};
SmartContractGetResult.prototype = {};
SmartContractGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.smartContract = new SmartContract();
        this.smartContract.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smartContract !== null && this.smartContract !== undefined) {
    output.writeFieldBegin('smartContract', Thrift.Type.STRUCT, 2);
    this.smartContract.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartContractAddressesListGetResult = function(args) {
  this.status = null;
  this.addressesList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.addressesList !== undefined && args.addressesList !== null) {
      this.addressesList = Thrift.copyList(args.addressesList, [null]);
    }
  }
};
SmartContractAddressesListGetResult.prototype = {};
SmartContractAddressesListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size50 = 0;
        var _rtmp354;
        this.addressesList = [];
        var _etype53 = 0;
        _rtmp354 = input.readListBegin();
        _etype53 = _rtmp354.etype;
        _size50 = _rtmp354.size;
        for (var _i55 = 0; _i55 < _size50; ++_i55)
        {
          var elem56 = null;
          elem56 = input.readBinary().value;
          this.addressesList.push(elem56);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractAddressesListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractAddressesListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.addressesList !== null && this.addressesList !== undefined) {
    output.writeFieldBegin('addressesList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRING, this.addressesList.length);
    for (var iter57 in this.addressesList)
    {
      if (this.addressesList.hasOwnProperty(iter57))
      {
        iter57 = this.addressesList[iter57];
        output.writeBinary(iter57);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartContractsListGetResult = function(args) {
  this.status = null;
  this.smartContractsList = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.smartContractsList !== undefined && args.smartContractsList !== null) {
      this.smartContractsList = Thrift.copyList(args.smartContractsList, [SmartContract]);
    }
  }
};
SmartContractsListGetResult.prototype = {};
SmartContractsListGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size58 = 0;
        var _rtmp362;
        this.smartContractsList = [];
        var _etype61 = 0;
        _rtmp362 = input.readListBegin();
        _etype61 = _rtmp362.etype;
        _size58 = _rtmp362.size;
        for (var _i63 = 0; _i63 < _size58; ++_i63)
        {
          var elem64 = null;
          elem64 = new SmartContract();
          elem64.read(input);
          this.smartContractsList.push(elem64);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartContractsListGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartContractsListGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.smartContractsList !== null && this.smartContractsList !== undefined) {
    output.writeFieldBegin('smartContractsList', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.smartContractsList.length);
    for (var iter65 in this.smartContractsList)
    {
      if (this.smartContractsList.hasOwnProperty(iter65))
      {
        iter65 = this.smartContractsList[iter65];
        iter65.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

SmartMethodParamsGetResult = function(args) {
  this.status = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [null]);
    }
  }
};
SmartMethodParamsGetResult.prototype = {};
SmartMethodParamsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size66 = 0;
        var _rtmp370;
        this.params = [];
        var _etype69 = 0;
        _rtmp370 = input.readListBegin();
        _etype69 = _rtmp370.etype;
        _size66 = _rtmp370.size;
        for (var _i71 = 0; _i71 < _size66; ++_i71)
        {
          var elem72 = null;
          elem72 = input.readString().value;
          this.params.push(elem72);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

SmartMethodParamsGetResult.prototype.write = function(output) {
  output.writeStructBegin('SmartMethodParamsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 2);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRING, this.params.length);
    for (var iter73 in this.params)
    {
      if (this.params.hasOwnProperty(iter73))
      {
        iter73 = this.params[iter73];
        output.writeString(iter73);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WalletInfo = function(args) {
  this.address = null;
  this.balance = null;
  this.transactionsNumber = null;
  this.firstTransactionTime = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.balance !== undefined && args.balance !== null) {
      this.balance = new Amount(args.balance);
    }
    if (args.transactionsNumber !== undefined && args.transactionsNumber !== null) {
      this.transactionsNumber = args.transactionsNumber;
    }
    if (args.firstTransactionTime !== undefined && args.firstTransactionTime !== null) {
      this.firstTransactionTime = args.firstTransactionTime;
    }
  }
};
WalletInfo.prototype = {};
WalletInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.balance = new Amount();
        this.balance.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I64) {
        this.transactionsNumber = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.firstTransactionTime = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletInfo.prototype.write = function(output) {
  output.writeStructBegin('WalletInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.balance !== null && this.balance !== undefined) {
    output.writeFieldBegin('balance', Thrift.Type.STRUCT, 2);
    this.balance.write(output);
    output.writeFieldEnd();
  }
  if (this.transactionsNumber !== null && this.transactionsNumber !== undefined) {
    output.writeFieldBegin('transactionsNumber', Thrift.Type.I64, 3);
    output.writeI64(this.transactionsNumber);
    output.writeFieldEnd();
  }
  if (this.firstTransactionTime !== null && this.firstTransactionTime !== undefined) {
    output.writeFieldBegin('firstTransactionTime', Thrift.Type.I64, 4);
    output.writeI64(this.firstTransactionTime);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WalletsGetResult = function(args) {
  this.status = null;
  this.wallets = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.wallets !== undefined && args.wallets !== null) {
      this.wallets = Thrift.copyList(args.wallets, [WalletInfo]);
    }
  }
};
WalletsGetResult.prototype = {};
WalletsGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.LIST) {
        var _size74 = 0;
        var _rtmp378;
        this.wallets = [];
        var _etype77 = 0;
        _rtmp378 = input.readListBegin();
        _etype77 = _rtmp378.etype;
        _size74 = _rtmp378.size;
        for (var _i79 = 0; _i79 < _size74; ++_i79)
        {
          var elem80 = null;
          elem80 = new WalletInfo();
          elem80.read(input);
          this.wallets.push(elem80);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WalletsGetResult.prototype.write = function(output) {
  output.writeStructBegin('WalletsGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.wallets !== null && this.wallets !== undefined) {
    output.writeFieldBegin('wallets', Thrift.Type.LIST, 2);
    output.writeListBegin(Thrift.Type.STRUCT, this.wallets.length);
    for (var iter81 in this.wallets)
    {
      if (this.wallets.hasOwnProperty(iter81))
      {
        iter81 = this.wallets[iter81];
        iter81.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WriterInfo = function(args) {
  this.address = null;
  this.timesWriter = null;
  this.feeCollected = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.timesWriter !== undefined && args.timesWriter !== null) {
      this.timesWriter = args.timesWriter;
    }
    if (args.feeCollected !== undefined && args.feeCollected !== null) {
      this.feeCollected = new Amount(args.feeCollected);
    }
  }
};
WriterInfo.prototype = {};
WriterInfo.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.timesWriter = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.feeCollected = new Amount();
        this.feeCollected.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WriterInfo.prototype.write = function(output) {
  output.writeStructBegin('WriterInfo');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.timesWriter !== null && this.timesWriter !== undefined) {
    output.writeFieldBegin('timesWriter', Thrift.Type.I32, 2);
    output.writeI32(this.timesWriter);
    output.writeFieldEnd();
  }
  if (this.feeCollected !== null && this.feeCollected !== undefined) {
    output.writeFieldBegin('feeCollected', Thrift.Type.STRUCT, 3);
    this.feeCollected.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

WritersGetResult = function(args) {
  this.status = null;
  this.pages = null;
  this.writers = null;
  if (args) {
    if (args.status !== undefined && args.status !== null) {
      this.status = new APIResponse(args.status);
    }
    if (args.pages !== undefined && args.pages !== null) {
      this.pages = args.pages;
    }
    if (args.writers !== undefined && args.writers !== null) {
      this.writers = Thrift.copyList(args.writers, [WriterInfo]);
    }
  }
};
WritersGetResult.prototype = {};
WritersGetResult.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.status = new APIResponse();
        this.status.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.pages = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        var _size82 = 0;
        var _rtmp386;
        this.writers = [];
        var _etype85 = 0;
        _rtmp386 = input.readListBegin();
        _etype85 = _rtmp386.etype;
        _size82 = _rtmp386.size;
        for (var _i87 = 0; _i87 < _size82; ++_i87)
        {
          var elem88 = null;
          elem88 = new WriterInfo();
          elem88.read(input);
          this.writers.push(elem88);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WritersGetResult.prototype.write = function(output) {
  output.writeStructBegin('WritersGetResult');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.STRUCT, 1);
    this.status.write(output);
    output.writeFieldEnd();
  }
  if (this.pages !== null && this.pages !== undefined) {
    output.writeFieldBegin('pages', Thrift.Type.I32, 2);
    output.writeI32(this.pages);
    output.writeFieldEnd();
  }
  if (this.writers !== null && this.writers !== undefined) {
    output.writeFieldBegin('writers', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.writers.length);
    for (var iter89 in this.writers)
    {
      if (this.writers.hasOwnProperty(iter89))
      {
        iter89 = this.writers[iter89];
        iter89.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

