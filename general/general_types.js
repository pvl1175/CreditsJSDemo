//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


Variant = function(args) {
  this.v_null = null;
  this.v_boolean = null;
  this.v_boolean_box = null;
  this.v_byte = null;
  this.v_byte_box = null;
  this.v_short = null;
  this.v_short_box = null;
  this.v_int = null;
  this.v_int_box = null;
  this.v_long = null;
  this.v_long_box = null;
  this.v_float = null;
  this.v_float_box = null;
  this.v_double = null;
  this.v_double_box = null;
  this.v_string = null;
  this.v_list = null;
  this.v_set = null;
  this.v_map = null;
  this.v_array = null;
  if (args) {
    if (args.v_null !== undefined && args.v_null !== null) {
      this.v_null = args.v_null;
    }
    if (args.v_boolean !== undefined && args.v_boolean !== null) {
      this.v_boolean = args.v_boolean;
    }
    if (args.v_boolean_box !== undefined && args.v_boolean_box !== null) {
      this.v_boolean_box = args.v_boolean_box;
    }
    if (args.v_byte !== undefined && args.v_byte !== null) {
      this.v_byte = args.v_byte;
    }
    if (args.v_byte_box !== undefined && args.v_byte_box !== null) {
      this.v_byte_box = args.v_byte_box;
    }
    if (args.v_short !== undefined && args.v_short !== null) {
      this.v_short = args.v_short;
    }
    if (args.v_short_box !== undefined && args.v_short_box !== null) {
      this.v_short_box = args.v_short_box;
    }
    if (args.v_int !== undefined && args.v_int !== null) {
      this.v_int = args.v_int;
    }
    if (args.v_int_box !== undefined && args.v_int_box !== null) {
      this.v_int_box = args.v_int_box;
    }
    if (args.v_long !== undefined && args.v_long !== null) {
      this.v_long = args.v_long;
    }
    if (args.v_long_box !== undefined && args.v_long_box !== null) {
      this.v_long_box = args.v_long_box;
    }
    if (args.v_float !== undefined && args.v_float !== null) {
      this.v_float = args.v_float;
    }
    if (args.v_float_box !== undefined && args.v_float_box !== null) {
      this.v_float_box = args.v_float_box;
    }
    if (args.v_double !== undefined && args.v_double !== null) {
      this.v_double = args.v_double;
    }
    if (args.v_double_box !== undefined && args.v_double_box !== null) {
      this.v_double_box = args.v_double_box;
    }
    if (args.v_string !== undefined && args.v_string !== null) {
      this.v_string = args.v_string;
    }
    if (args.v_list !== undefined && args.v_list !== null) {
      this.v_list = Thrift.copyList(args.v_list, [null]);
    }
    if (args.v_set !== undefined && args.v_set !== null) {
      this.v_set = Thrift.copyList(args.v_set, [null]);
    }
    if (args.v_map !== undefined && args.v_map !== null) {
      this.v_map = Thrift.copyMap(args.v_map, [null]);
    }
    if (args.v_array !== undefined && args.v_array !== null) {
      this.v_array = Thrift.copyList(args.v_array, [null]);
    }
  }
};
Variant.prototype = {};
Variant.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.v_null = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.BOOL) {
        this.v_boolean = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.BOOL) {
        this.v_boolean_box = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.BYTE) {
        this.v_byte = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.BYTE) {
        this.v_byte_box = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.I16) {
        this.v_short = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 7:
      if (ftype == Thrift.Type.I16) {
        this.v_short_box = input.readI16().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 8:
      if (ftype == Thrift.Type.I32) {
        this.v_int = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 9:
      if (ftype == Thrift.Type.I32) {
        this.v_int_box = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.v_long = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 11:
      if (ftype == Thrift.Type.I64) {
        this.v_long_box = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 12:
      if (ftype == Thrift.Type.DOUBLE) {
        this.v_float = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 13:
      if (ftype == Thrift.Type.DOUBLE) {
        this.v_float_box = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 14:
      if (ftype == Thrift.Type.DOUBLE) {
        this.v_double = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 15:
      if (ftype == Thrift.Type.DOUBLE) {
        this.v_double_box = input.readDouble().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 16:
      if (ftype == Thrift.Type.STRING) {
        this.v_string = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 17:
      if (ftype == Thrift.Type.LIST) {
        this.v_list = [];
        var _rtmp31 = input.readListBegin();
        var _size0 = _rtmp31.size || 0;
        for (var _i2 = 0; _i2 < _size0; ++_i2) {
          var elem3 = null;
          elem3 = new Variant();
          elem3.read(input);
          this.v_list.push(elem3);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 18:
      if (ftype == Thrift.Type.SET) {
        this.v_set = [];
        var _rtmp35 = input.readSetBegin();
        var _size4 = _rtmp35.size || 0;
        for (var _i6 = 0; _i6 < _size4; ++_i6) {
          var elem7 = null;
          elem7 = new Variant();
          elem7.read(input);
          this.v_set.push(elem7);
        }
        input.readSetEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 19:
      if (ftype == Thrift.Type.MAP) {
        this.v_map = {};
        var _rtmp39 = input.readMapBegin();
        var _size8 = _rtmp39.size || 0;
        for (var _i10 = 0; _i10 < _size8; ++_i10) {
          if (_i10 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key11 = null;
          var val12 = null;
          key11 = new Variant();
          key11.read(input);
          val12 = new Variant();
          val12.read(input);
          this.v_map[key11] = val12;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        this.v_array = [];
        var _rtmp314 = input.readListBegin();
        var _size13 = _rtmp314.size || 0;
        for (var _i15 = 0; _i15 < _size13; ++_i15) {
          var elem16 = null;
          elem16 = new Variant();
          elem16.read(input);
          this.v_array.push(elem16);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Variant.prototype.write = function(output) {
  output.writeStructBegin('Variant');
  if (this.v_null !== null && this.v_null !== undefined) {
    output.writeFieldBegin('v_null', Thrift.Type.BYTE, 1);
    output.writeByte(this.v_null);
    output.writeFieldEnd();
  }
  if (this.v_boolean !== null && this.v_boolean !== undefined) {
    output.writeFieldBegin('v_boolean', Thrift.Type.BOOL, 2);
    output.writeBool(this.v_boolean);
    output.writeFieldEnd();
  }
  if (this.v_boolean_box !== null && this.v_boolean_box !== undefined) {
    output.writeFieldBegin('v_boolean_box', Thrift.Type.BOOL, 3);
    output.writeBool(this.v_boolean_box);
    output.writeFieldEnd();
  }
  if (this.v_byte !== null && this.v_byte !== undefined) {
    output.writeFieldBegin('v_byte', Thrift.Type.BYTE, 4);
    output.writeByte(this.v_byte);
    output.writeFieldEnd();
  }
  if (this.v_byte_box !== null && this.v_byte_box !== undefined) {
    output.writeFieldBegin('v_byte_box', Thrift.Type.BYTE, 5);
    output.writeByte(this.v_byte_box);
    output.writeFieldEnd();
  }
  if (this.v_short !== null && this.v_short !== undefined) {
    output.writeFieldBegin('v_short', Thrift.Type.I16, 6);
    output.writeI16(this.v_short);
    output.writeFieldEnd();
  }
  if (this.v_short_box !== null && this.v_short_box !== undefined) {
    output.writeFieldBegin('v_short_box', Thrift.Type.I16, 7);
    output.writeI16(this.v_short_box);
    output.writeFieldEnd();
  }
  if (this.v_int !== null && this.v_int !== undefined) {
    output.writeFieldBegin('v_int', Thrift.Type.I32, 8);
    output.writeI32(this.v_int);
    output.writeFieldEnd();
  }
  if (this.v_int_box !== null && this.v_int_box !== undefined) {
    output.writeFieldBegin('v_int_box', Thrift.Type.I32, 9);
    output.writeI32(this.v_int_box);
    output.writeFieldEnd();
  }
  if (this.v_long !== null && this.v_long !== undefined) {
    output.writeFieldBegin('v_long', Thrift.Type.I64, 10);
    output.writeI64(this.v_long);
    output.writeFieldEnd();
  }
  if (this.v_long_box !== null && this.v_long_box !== undefined) {
    output.writeFieldBegin('v_long_box', Thrift.Type.I64, 11);
    output.writeI64(this.v_long_box);
    output.writeFieldEnd();
  }
  if (this.v_float !== null && this.v_float !== undefined) {
    output.writeFieldBegin('v_float', Thrift.Type.DOUBLE, 12);
    output.writeDouble(this.v_float);
    output.writeFieldEnd();
  }
  if (this.v_float_box !== null && this.v_float_box !== undefined) {
    output.writeFieldBegin('v_float_box', Thrift.Type.DOUBLE, 13);
    output.writeDouble(this.v_float_box);
    output.writeFieldEnd();
  }
  if (this.v_double !== null && this.v_double !== undefined) {
    output.writeFieldBegin('v_double', Thrift.Type.DOUBLE, 14);
    output.writeDouble(this.v_double);
    output.writeFieldEnd();
  }
  if (this.v_double_box !== null && this.v_double_box !== undefined) {
    output.writeFieldBegin('v_double_box', Thrift.Type.DOUBLE, 15);
    output.writeDouble(this.v_double_box);
    output.writeFieldEnd();
  }
  if (this.v_string !== null && this.v_string !== undefined) {
    output.writeFieldBegin('v_string', Thrift.Type.STRING, 16);
    output.writeString(this.v_string);
    output.writeFieldEnd();
  }
  if (this.v_list !== null && this.v_list !== undefined) {
    output.writeFieldBegin('v_list', Thrift.Type.LIST, 17);
    output.writeListBegin(Thrift.Type.STRUCT, this.v_list.length);
    for (var iter17 in this.v_list) {
      if (this.v_list.hasOwnProperty(iter17)) {
        iter17 = this.v_list[iter17];
        iter17.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.v_set !== null && this.v_set !== undefined) {
    output.writeFieldBegin('v_set', Thrift.Type.SET, 18);
    output.writeSetBegin(Thrift.Type.STRUCT, this.v_set.length);
    for (var iter18 in this.v_set) {
      if (this.v_set.hasOwnProperty(iter18)) {
        iter18 = this.v_set[iter18];
        iter18.write(output);
      }
    }
    output.writeSetEnd();
    output.writeFieldEnd();
  }
  if (this.v_map !== null && this.v_map !== undefined) {
    output.writeFieldBegin('v_map', Thrift.Type.MAP, 19);
    output.writeMapBegin(Thrift.Type.STRUCT, Thrift.Type.STRUCT, Thrift.objectLength(this.v_map));
    for (var kiter19 in this.v_map) {
      if (this.v_map.hasOwnProperty(kiter19)) {
        var viter20 = this.v_map[kiter19];
        kiter19.write(output);
        viter20.write(output);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  if (this.v_array !== null && this.v_array !== undefined) {
    output.writeFieldBegin('v_array', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.v_array.length);
    for (var iter21 in this.v_array) {
      if (this.v_array.hasOwnProperty(iter21)) {
        iter21 = this.v_array[iter21];
        iter21.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

Annotation = function(args) {
  this.name = null;
  this.arguments = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyMap(args.arguments, [null]);
    }
  }
};
Annotation.prototype = {};
Annotation.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.MAP) {
        this.arguments = {};
        var _rtmp323 = input.readMapBegin();
        var _size22 = _rtmp323.size || 0;
        for (var _i24 = 0; _i24 < _size22; ++_i24) {
          if (_i24 > 0 ) {
            if (input.rstack.length > input.rpos[input.rpos.length -1] + 1) {
              input.rstack.pop();
            }
          }
          var key25 = null;
          var val26 = null;
          key25 = input.readString().value;
          val26 = input.readString().value;
          this.arguments[key25] = val26;
        }
        input.readMapEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Annotation.prototype.write = function(output) {
  output.writeStructBegin('Annotation');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.MAP, 2);
    output.writeMapBegin(Thrift.Type.STRING, Thrift.Type.STRING, Thrift.objectLength(this.arguments));
    for (var kiter27 in this.arguments) {
      if (this.arguments.hasOwnProperty(kiter27)) {
        var viter28 = this.arguments[kiter27];
        output.writeString(kiter27);
        output.writeString(viter28);
      }
    }
    output.writeMapEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MethodArgument = function(args) {
  this.type = null;
  this.name = null;
  this.annotations = null;
  if (args) {
    if (args.type !== undefined && args.type !== null) {
      this.type = args.type;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Annotation]);
    }
  }
};
MethodArgument.prototype = {};
MethodArgument.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.type = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.annotations = [];
        var _rtmp330 = input.readListBegin();
        var _size29 = _rtmp330.size || 0;
        for (var _i31 = 0; _i31 < _size29; ++_i31) {
          var elem32 = null;
          elem32 = new Annotation();
          elem32.read(input);
          this.annotations.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MethodArgument.prototype.write = function(output) {
  output.writeStructBegin('MethodArgument');
  if (this.type !== null && this.type !== undefined) {
    output.writeFieldBegin('type', Thrift.Type.STRING, 1);
    output.writeString(this.type);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter33 in this.annotations) {
      if (this.annotations.hasOwnProperty(iter33)) {
        iter33 = this.annotations[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

MethodDescription = function(args) {
  this.returnType = null;
  this.name = null;
  this.arguments = null;
  this.annotations = null;
  if (args) {
    if (args.returnType !== undefined && args.returnType !== null) {
      this.returnType = args.returnType;
    }
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.arguments !== undefined && args.arguments !== null) {
      this.arguments = Thrift.copyList(args.arguments, [MethodArgument]);
    }
    if (args.annotations !== undefined && args.annotations !== null) {
      this.annotations = Thrift.copyList(args.annotations, [Annotation]);
    }
  }
};
MethodDescription.prototype = {};
MethodDescription.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.returnType = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.LIST) {
        this.arguments = [];
        var _rtmp335 = input.readListBegin();
        var _size34 = _rtmp335.size || 0;
        for (var _i36 = 0; _i36 < _size34; ++_i36) {
          var elem37 = null;
          elem37 = new MethodArgument();
          elem37.read(input);
          this.arguments.push(elem37);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.LIST) {
        this.annotations = [];
        var _rtmp339 = input.readListBegin();
        var _size38 = _rtmp339.size || 0;
        for (var _i40 = 0; _i40 < _size38; ++_i40) {
          var elem41 = null;
          elem41 = new Annotation();
          elem41.read(input);
          this.annotations.push(elem41);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

MethodDescription.prototype.write = function(output) {
  output.writeStructBegin('MethodDescription');
  if (this.returnType !== null && this.returnType !== undefined) {
    output.writeFieldBegin('returnType', Thrift.Type.STRING, 1);
    output.writeString(this.returnType);
    output.writeFieldEnd();
  }
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 2);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.arguments !== null && this.arguments !== undefined) {
    output.writeFieldBegin('arguments', Thrift.Type.LIST, 3);
    output.writeListBegin(Thrift.Type.STRUCT, this.arguments.length);
    for (var iter42 in this.arguments) {
      if (this.arguments.hasOwnProperty(iter42)) {
        iter42 = this.arguments[iter42];
        iter42.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.annotations !== null && this.annotations !== undefined) {
    output.writeFieldBegin('annotations', Thrift.Type.LIST, 4);
    output.writeListBegin(Thrift.Type.STRUCT, this.annotations.length);
    for (var iter43 in this.annotations) {
      if (this.annotations.hasOwnProperty(iter43)) {
        iter43 = this.annotations[iter43];
        iter43.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ByteCodeObject = function(args) {
  this.name = null;
  this.byteCode = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
  }
};
ByteCodeObject.prototype = {};
ByteCodeObject.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ByteCodeObject.prototype.write = function(output) {
  output.writeStructBegin('ByteCodeObject');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 1);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 2);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

APIResponse = function(args) {
  this.code = null;
  this.message = null;
  if (args) {
    if (args.code !== undefined && args.code !== null) {
      this.code = args.code;
    }
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    }
  }
};
APIResponse.prototype = {};
APIResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.BYTE) {
        this.code = input.readByte().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

APIResponse.prototype.write = function(output) {
  output.writeStructBegin('APIResponse');
  if (this.code !== null && this.code !== undefined) {
    output.writeFieldBegin('code', Thrift.Type.BYTE, 1);
    output.writeByte(this.code);
    output.writeFieldEnd();
  }
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 2);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

