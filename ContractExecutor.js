//
// Autogenerated by Thrift Compiler (0.11.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

ContractExecutor_executeByteCode_args = function(args) {
  this.address = null;
  this.byteCode = null;
  this.contractState = null;
  this.method = null;
  this.params = null;
  if (args) {
    if (args.address !== undefined && args.address !== null) {
      this.address = args.address;
    }
    if (args.byteCode !== undefined && args.byteCode !== null) {
      this.byteCode = args.byteCode;
    }
    if (args.contractState !== undefined && args.contractState !== null) {
      this.contractState = args.contractState;
    }
    if (args.method !== undefined && args.method !== null) {
      this.method = args.method;
    }
    if (args.params !== undefined && args.params !== null) {
      this.params = Thrift.copyList(args.params, [Variant]);
    }
  }
};
ContractExecutor_executeByteCode_args.prototype = {};
ContractExecutor_executeByteCode_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.address = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.byteCode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRING) {
        this.contractState = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.STRING) {
        this.method = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.LIST) {
        var _size26 = 0;
        var _rtmp330;
        this.params = [];
        var _etype29 = 0;
        _rtmp330 = input.readListBegin();
        _etype29 = _rtmp330.etype;
        _size26 = _rtmp330.size;
        for (var _i31 = 0; _i31 < _size26; ++_i31)
        {
          var elem32 = null;
          elem32 = new Variant();
          elem32.read(input);
          this.params.push(elem32);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_args');
  if (this.address !== null && this.address !== undefined) {
    output.writeFieldBegin('address', Thrift.Type.STRING, 1);
    output.writeBinary(this.address);
    output.writeFieldEnd();
  }
  if (this.byteCode !== null && this.byteCode !== undefined) {
    output.writeFieldBegin('byteCode', Thrift.Type.STRING, 2);
    output.writeBinary(this.byteCode);
    output.writeFieldEnd();
  }
  if (this.contractState !== null && this.contractState !== undefined) {
    output.writeFieldBegin('contractState', Thrift.Type.STRING, 3);
    output.writeBinary(this.contractState);
    output.writeFieldEnd();
  }
  if (this.method !== null && this.method !== undefined) {
    output.writeFieldBegin('method', Thrift.Type.STRING, 4);
    output.writeString(this.method);
    output.writeFieldEnd();
  }
  if (this.params !== null && this.params !== undefined) {
    output.writeFieldBegin('params', Thrift.Type.LIST, 5);
    output.writeListBegin(Thrift.Type.STRUCT, this.params.length);
    for (var iter33 in this.params)
    {
      if (this.params.hasOwnProperty(iter33))
      {
        iter33 = this.params[iter33];
        iter33.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_executeByteCode_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new APIResponse(args.success);
    }
  }
};
ContractExecutor_executeByteCode_result.prototype = {};
ContractExecutor_executeByteCode_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new APIResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_executeByteCode_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_executeByteCode_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractMethods_args = function(args) {
  this.bytecode = null;
  if (args) {
    if (args.bytecode !== undefined && args.bytecode !== null) {
      this.bytecode = args.bytecode;
    }
  }
};
ContractExecutor_getContractMethods_args.prototype = {};
ContractExecutor_getContractMethods_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.bytecode = input.readBinary().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_args.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_args');
  if (this.bytecode !== null && this.bytecode !== undefined) {
    output.writeFieldBegin('bytecode', Thrift.Type.STRING, 1);
    output.writeBinary(this.bytecode);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutor_getContractMethods_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new GetContractMethodsResult(args.success);
    }
  }
};
ContractExecutor_getContractMethods_result.prototype = {};
ContractExecutor_getContractMethods_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new GetContractMethodsResult();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ContractExecutor_getContractMethods_result.prototype.write = function(output) {
  output.writeStructBegin('ContractExecutor_getContractMethods_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

ContractExecutorClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
ContractExecutorClient.prototype = {};
ContractExecutorClient.prototype.executeByteCode = function(address, byteCode, contractState, method, params, callback) {
  this.send_executeByteCode(address, byteCode, contractState, method, params, callback); 
  if (!callback) {
    return this.recv_executeByteCode();
  }
};

ContractExecutorClient.prototype.send_executeByteCode = function(address, byteCode, contractState, method, params, callback) {
  this.output.writeMessageBegin('executeByteCode', Thrift.MessageType.CALL, this.seqid);
  var params = {
    address: address,
    byteCode: byteCode,
    contractState: contractState,
    method: method,
    params: params
  };
  var args = new ContractExecutor_executeByteCode_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_executeByteCode();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_executeByteCode = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_executeByteCode_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'executeByteCode failed: unknown result';
};
ContractExecutorClient.prototype.getContractMethods = function(bytecode, callback) {
  this.send_getContractMethods(bytecode, callback); 
  if (!callback) {
    return this.recv_getContractMethods();
  }
};

ContractExecutorClient.prototype.send_getContractMethods = function(bytecode, callback) {
  this.output.writeMessageBegin('getContractMethods', Thrift.MessageType.CALL, this.seqid);
  var params = {
    bytecode: bytecode
  };
  var args = new ContractExecutor_getContractMethods_args(params);
  args.write(this.output);
  this.output.writeMessageEnd();
  if (callback) {
    var self = this;
    this.output.getTransport().flush(true, function() {
      var result = null;
      try {
        result = self.recv_getContractMethods();
      } catch (e) {
        result = e;
      }
      callback(result);
    });
  } else {
    return this.output.getTransport().flush();
  }
};

ContractExecutorClient.prototype.recv_getContractMethods = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new ContractExecutor_getContractMethods_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getContractMethods failed: unknown result';
};
